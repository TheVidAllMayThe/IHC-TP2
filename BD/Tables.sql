CREATE SCHEMA Magic;

GO

ALTER USER p2g1 WITH DEFAULT_SCHEMA = dbo; --IHC
ALTER USER p2g1 WITH DEFAULT_SCHEMA = Magic; --BD

go


CREATE TABLE [User] (
	email VARCHAR(255) NOT NULL,
	[password] TEXT NOT NULL,
	balance MONEY DEFAULT 0.0 NOT NULL,
	PRIMARY KEY (email),
	CHECK(balance >= 0.0)
);

CREATE TABLE Edition (
	[name] VARCHAR(MAX) NOT NULL,
	code VARCHAR(255) NOT NULL,
	legality VARCHAR(MAX) NOT NULL,
	mkm_id INT,
	gathererCode VARCHAR(255),
	releaseDate DATE,
	PRIMARY KEY (code)
);

CREATE TABLE [Card] (
	id INTEGER IDENTITY(1,1) NOT NULL,
	[name] VARCHAR(MAX) NOT NULL,
	rarity VARCHAR(255) NOT NULL,
	edition VARCHAR(255),
	artist VARCHAR(MAX),
	imageName VARCHAR(MAX),
	gathererID INT,
	multiverseID INT,
	manaCost VARCHAR(100),
	[text] TEXT,
	cmc INT,
	PRIMARY KEY (id),
	FOREIGN KEY (edition) REFERENCES Edition(code) ON DELETE SET NULL
);

CREATE TABLE Creature(
	[card] INT NOT NULL,
	power INT,
	toughness INT,
	PRIMARY KEY ([card]),
	FOREIGN KEY ([card]) REFERENCES [Card](ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE ColorIdentity(
	[card] INT NOT NULL,
	color VARCHAR(20) NOT NULL,
	isManaColor BIT NOT NULL,
	PRIMARY KEY ([card], color),
	FOREIGN KEY ([card]) REFERENCES [Card](ID) ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE SubtypeOfCard(
	card INTEGER NOT NULL,
	subtype VARCHAR(255) NOT NULL,
	PRIMARY KEY (card, subtype),
	FOREIGN KEY (card) REFERENCES Card(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE TypeOfCard(
	card INTEGER NOT NULL,
	type VARCHAR(255) NOT NULL,
	PRIMARY KEY (card, type),
	FOREIGN KEY (card) REFERENCES Card(id)  ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Deck(
	id INTEGER IDENTITY(1,1) NOT NULL,
	[name] VARCHAR(255) NOT NULL,
	creator VARCHAR(255) NOT NULL,
	rating FLOAT,
	UNIQUE(creator, [name]),
	PRIMARY KEY (id),
	FOREIGN KEY (creator) REFERENCES [User](email)
);

CREATE TABLE CardInDeck(
	[card] INTEGER NOT NULL,
	deck INTEGER NOT NULL,
	amount INTEGER NOT NULL,
	isSideboard BIT NOT NULL,
	PRIMARY KEY (deck, [card]),
	FOREIGN KEY (deck) REFERENCES Deck (id),
	FOREIGN KEY ([card]) REFERENCES [Card] (id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE TagOfDeck(
	deck INTEGER NOT NULL,
	tag VARCHAR(50) NOT NULL,
	PRIMARY KEY (deck, tag),
	FOREIGN KEY (deck) REFERENCES Deck(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE RatedBy(
	deck INT NOT NULL,
	[user] VARCHAR(255) NOT NULL,
	rating FLOAT NOT NULL,
	PRIMARY KEY (deck, [user]),
	FOREIGN KEY (deck) REFERENCES Deck(id) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY ([user]) REFERENCES [User](email) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Flavor(
	card INTEGER NOT NULL,
	flavor TEXT NOT NULL,
	PRIMARY KEY (card),
	FOREIGN KEY (card) REFERENCES Card(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Ability(
	card INTEGER NOT NULL,
	Ability VARCHAR(255) NOT NULL,
	action BIT NOT NULL,
	PRIMARY KEY (card, Ability),
	FOREIGN KEY (card) REFERENCES Card(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Listing(
	ID INT IDENTITY(1,1) NOT NULL,
	[User] VARCHAR(255) NOT NULL,
	StartDate DATETIME NOT NULL,
	Sell BIT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY([User]) REFERENCES [User](Email)
);

CREATE TABLE CardInListing(
	ID INT IDENTITY(1,1) NOT NULL,
	Listing INT NOT NULL,
	Card INT NOT NULL,
	Price_Per_Unit MONEY NOT NULL,
	Units INT DEFAULT 1 NOT NULL,
	Condition VARCHAR(20),
	PRIMARY KEY (ID),
	FOREIGN KEY (Listing) REFERENCES Listing(ID),
	FOREIGN KEY (Card) REFERENCES Card(ID)
);

CREATE TABLE CardInListingHistory(
	ID INT IDENTITY(1,1) NOT NULL,
	EndDate DATETIME NOT NULL,
	SecondaryUser VARCHAR(255) NOT NULL,
	Listing INT NOT NULL,
	Card INT NOT NULL,
	Price_Per_Unit MONEY NOT NULL,
	Units INT DEFAULT 1 NOT NULL,
	Condition VARCHAR(20),
	PRIMARY KEY (ID),
	FOREIGN KEY (Listing) REFERENCES Listing(ID),
	FOREIGN KEY (Card) REFERENCES Card(ID),
	FOREIGN KEY (SecondaryUser) REFERENCES [User](Email),
	CHECK(Units > 0)
);



CREATE TABLE Wins(
	Winner int,
	Loser int,
	Amount int,
	PRIMARY KEY (Winner, Loser),
	FOREIGN KEY (Winner) REFERENCES Deck(ID),
	FOREIGN KEY (Loser) REFERENCES Deck(ID)
);
